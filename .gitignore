# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
.pytest_results/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# IDE specific files
# VSCode
.vscode/settings.json
.vscode/launch.json
.vscode/tasks.json
.vscode/.ropeproject

# PyCharm
.idea/
*.swp
*.swo
*~

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# OS specific files
# macOS
.DS_Store
.AppleDouble
.LSOverride
._*

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/

# Linux
*~
.directory
.Trash-*

# Yocto Build System specific
# Build directories (adjust these paths based on your setup)
build*/
downloads/
sstate-cache/
tmp/
work/
work-shared/
deploy/
buildhistory/
cache/

# Yocto specific files
*.bb.lock
*.bbappend~
*.bb~
*.conf~
*.inc~

# BitBake logs
bitbake-cookerdaemon.log
cooker_log*
*console-latest.log

# Build artifacts
*.rpm
*.deb
*.ipk
*.tar.gz
*.tar.bz2
*.tar.xz
*.wic
*.wic.gz
*.wic.bz2
*.wic.xz
*.ext4
*.ext3
*.ext2
*.squashfs
*.ubifs
*.ubi
*.jffs2
*.cramfs

# Firmware and bootloader files
*.bin
*.elf
*.u-boot
*.dtb
*.dtbo

# Application specific
# Log files
*.log
logs/
log/

# Configuration files with sensitive data
config/secrets.json
config/production.json
.env.local
.env.production

# Test data and temporary files
test_output/
temp_images/
captured_frames/
*.tmp.jpg
*.tmp.png
*.tmp.mp4
*.tmp.avi

# Backup files
*.bak
*.backup
*.old

# Development databases
*.db
*.sqlite
*.sqlite3

# Documentation build
docs/_build/
docs/build/

# Model files (if using ML models)
*.pkl
*.model
*.h5
*.pb

# Large media files (add specific extensions as needed)
*.mp4
*.avi
*.mov
*.mkv
*.flv
*.wmv
*.webm

# Development tools output
.mypy_cache/
.pylint.d/
.bandit
.coverage.*

# Docker (if using containerization)
.dockerignore
docker-compose.override.yml

# Kubernetes (if using orchestration)
*.secret.yaml
*.secret.yml

# Terraform (if using infrastructure as code)
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# Security and secrets
*.pem
*.key
*.crt
*.p12
*.pfx
secrets/
private/

# Local development configuration
local_config.json
development.conf
debug.conf

# Performance profiling output
*.prof
*.pstats